from flask import Flask, render_template, redirect, request, Response
import os
import subprocess
import sys
import pip

# create the flask app
app = Flask(__name__)

# this line is needed for cors, otherwise it is not important
app.config['SECRET_KEY'] = 'any secret string'

# get the working directory
folder = os.getcwd()

log_file='adera.log'

def simple_logger(log_message):
    with open(log_file, 'a') as f:
        f.write(log_message+'\n')


# this function reads the results generated by Adera.
def read_results():
    file = open('final_results.txt', 'r')
    lines = file.readlines()
    lines_new=[]
    for line in lines:
        line=line.split(' ')
        line=line[1]
        lines_new.append(line)
    return lines_new[:-1]

# if the app is being run for the first time
# install the dependencies 
def initialize():
    try:
        simple_logger('first_run is not found. Initalizing Adera.')
        deps = ['beautifulsoup4','Flask','keras','metapub','nltk','numpy','pandas','requests','tensorflow','tensorflow_hub','tika']
        simple_logger('Installed Python dependencies.')
        from init import init_stuff
        init_stuff()
        simple_logger('Downloaded models from TFHUB')
        if hasattr(pip, 'main'):
            for dep in deps:
                pip.main(['install', dep])
        else:
            for dep in deps:
                pip._internal.main(['install', dep])
        simple_logger('Initialization is complete.')
        os.mkdir('first_run')
        simple_logger('Created first_run directory.')
    except Exception as e:
        print(e)


# definin the root route which checks if the app
# is being run for the first time
@app.route('/', methods=['GET'])
def root():
    log_exists = os.path.exists(log_file)
    if not log_exists:
        with open(log_file, 'a') as f:
            f.write('Log file created.\n')
    first_run = "first_run"
    isExist = os.path.exists(first_run)
    if not isExist:
        initialize()
        simple_logger('Redirecting to /intro')
        return redirect('/intro')
    else:
        simple_logger('first_run exists, redirecting to /intro.')
        return redirect('/intro')

# defining the intro route and rendering templates/intro.html
@app.route('/intro', methods=['GET', 'POST'])
def intro():
    simple_logger('Rendering intro.html')
    return render_template('intro.html')

# defining the index route.
@app.route('/index', methods=['GET', 'POST'])
def index():
    if request.method == "POST":# if the method is post, that means the user submmited a query
        from adera import main  # import the main function of adera so we can call it
        query = request.form['query'] # get the user query
        if request.form['count']:# count is how many articles the user wants parsed 
            count=int(request.form['count'])# transform it into an integer
            if count < 1: # if the count is less than 1 then throw an error
                return render_template('error.html')
        else:
            count=10 # the default value for count
        try:
            main(query,count) # try running adera
        except Exception as e: # if there is an error, show the error page
            return render_template('error.html')
        return redirect('/results') # if adera is successfully ran, redirect to the results page
    return render_template('index.html') # if the method is get, render the index page.

# defining the results route
@app.route('/results', methods=['GET', 'POST'])
def results():
    results = read_results() # read the results file generated by Adera
    if request.method == "POST": # if the request is POST, it means the user wants to save the results
            return Response(# return the results text file 
        results,
        mimetype="text/html",
        headers={"Content-disposition":
                 "attachment; filename=results.txt"})
    else:
        return render_template('results.html',results=results) # if the request is GET, render the results page.

# defining the error route
@app.route('/error', methods=['GET', 'POST'])
def error():
    return render_template('error.html')

# run the flask app
if __name__ == '__main__':
   app.run(debug=True)






